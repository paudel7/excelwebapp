{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\React Project\\\\Excel Web App\\\\excelwebapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Table } from '@/components/ui/table';\nimport { Input } from '@/components/ui/input';\nimport { Upload } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelWebApp = () => {\n  _s();\n  const [sheets, setSheets] = useState([{\n    name: 'Sheet1',\n    data: [[]]\n  }]);\n  const [activeSheet, setActiveSheet] = useState(0);\n  const handleFileUpload = event => {\n    // In a real application, you'd process the Excel file here\n    // For now, we'll just show an alert\n    alert('File upload functionality would be implemented here');\n  };\n  const handleCellChange = (rowIndex, colIndex, value) => {\n    const newSheets = [...sheets];\n    newSheets[activeSheet].data[rowIndex][colIndex] = value;\n    setSheets(newSheets);\n  };\n  const addRow = () => {\n    const newSheets = [...sheets];\n    newSheets[activeSheet].data.push(Array(newSheets[activeSheet].data[0].length).fill(''));\n    setSheets(newSheets);\n  };\n  const addColumn = () => {\n    const newSheets = [...sheets];\n    newSheets[activeSheet].data = newSheets[activeSheet].data.map(row => [...row, '']);\n    setSheets(newSheets);\n  };\n  const downloadSheet = () => {\n    // In a real application, you'd convert the sheet data to an Excel file here\n    alert('Download functionality would be implemented here');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(Alert, {\n      children: /*#__PURE__*/_jsxDEV(AlertDescription, {\n        children: \"This is a basic prototype. Full Excel functionality would require significant additional development.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-4\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => document.getElementById('fileInput').click(),\n        children: [/*#__PURE__*/_jsxDEV(Upload, {\n          className: \"mr-2 h-4 w-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), \" Upload Excel File\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"fileInput\",\n        type: \"file\",\n        accept: \".xlsx, .xls\",\n        style: {\n          display: 'none'\n        },\n        onChange: handleFileUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      value: `sheet-${activeSheet}`,\n      onValueChange: value => setActiveSheet(parseInt(value.split('-')[1])),\n      children: [/*#__PURE__*/_jsxDEV(TabsList, {\n        children: sheets.map((sheet, index) => /*#__PURE__*/_jsxDEV(TabsTrigger, {\n          value: `sheet-${index}`,\n          children: sheet.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), sheets.map((sheet, sheetIndex) => /*#__PURE__*/_jsxDEV(TabsContent, {\n        value: `sheet-${sheetIndex}`,\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: sheet.data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  value: cell,\n                  onChange: e => handleCellChange(rowIndex, colIndex, e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 25\n                }, this)\n              }, colIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 23\n              }, this))\n            }, rowIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: addRow,\n            className: \"mr-2\",\n            children: \"Add Row\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: addColumn,\n            children: \"Add Column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, sheetIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: downloadSheet,\n      className: \"mt-4\",\n      children: \"Download Sheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(ExcelWebApp, \"UFWkFs6udrSyR4geEFvIzxcVMsA=\");\n_c = ExcelWebApp;\nexport default ExcelWebApp;\nvar _c;\n$RefreshReg$(_c, \"ExcelWebApp\");","map":{"version":3,"names":["React","useState","Alert","AlertDescription","Tabs","TabsContent","TabsList","TabsTrigger","Button","Table","Input","Upload","jsxDEV","_jsxDEV","ExcelWebApp","_s","sheets","setSheets","name","data","activeSheet","setActiveSheet","handleFileUpload","event","alert","handleCellChange","rowIndex","colIndex","value","newSheets","addRow","push","Array","length","fill","addColumn","map","row","downloadSheet","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","document","getElementById","click","id","type","accept","style","display","onChange","onValueChange","parseInt","split","sheet","index","sheetIndex","cell","e","target","_c","$RefreshReg$"],"sources":["D:/Development/React Project/Excel Web App/excelwebapp/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Table } from '@/components/ui/table';\nimport { Input } from '@/components/ui/input';\nimport { Upload } from 'lucide-react';\n\nconst ExcelWebApp = () => {\n  const [sheets, setSheets] = useState([{ name: 'Sheet1', data: [[]] }]);\n  const [activeSheet, setActiveSheet] = useState(0);\n\n  const handleFileUpload = (event) => {\n    // In a real application, you'd process the Excel file here\n    // For now, we'll just show an alert\n    alert('File upload functionality would be implemented here');\n  };\n\n  const handleCellChange = (rowIndex, colIndex, value) => {\n    const newSheets = [...sheets];\n    newSheets[activeSheet].data[rowIndex][colIndex] = value;\n    setSheets(newSheets);\n  };\n\n  const addRow = () => {\n    const newSheets = [...sheets];\n    newSheets[activeSheet].data.push(Array(newSheets[activeSheet].data[0].length).fill(''));\n    setSheets(newSheets);\n  };\n\n  const addColumn = () => {\n    const newSheets = [...sheets];\n    newSheets[activeSheet].data = newSheets[activeSheet].data.map(row => [...row, '']);\n    setSheets(newSheets);\n  };\n\n  const downloadSheet = () => {\n    // In a real application, you'd convert the sheet data to an Excel file here\n    alert('Download functionality would be implemented here');\n  };\n\n  return (\n    <div className=\"p-4\">\n      <Alert>\n        <AlertDescription>\n          This is a basic prototype. Full Excel functionality would require significant additional development.\n        </AlertDescription>\n      </Alert>\n      \n      <div className=\"my-4\">\n        <Button onClick={() => document.getElementById('fileInput').click()}>\n          <Upload className=\"mr-2 h-4 w-4\" /> Upload Excel File\n        </Button>\n        <input\n          id=\"fileInput\"\n          type=\"file\"\n          accept=\".xlsx, .xls\"\n          style={{ display: 'none' }}\n          onChange={handleFileUpload}\n        />\n      </div>\n\n      <Tabs value={`sheet-${activeSheet}`} onValueChange={(value) => setActiveSheet(parseInt(value.split('-')[1]))}>\n        <TabsList>\n          {sheets.map((sheet, index) => (\n            <TabsTrigger key={index} value={`sheet-${index}`}>\n              {sheet.name}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n        \n        {sheets.map((sheet, sheetIndex) => (\n          <TabsContent key={sheetIndex} value={`sheet-${sheetIndex}`}>\n            <Table>\n              <tbody>\n                {sheet.data.map((row, rowIndex) => (\n                  <tr key={rowIndex}>\n                    {row.map((cell, colIndex) => (\n                      <td key={colIndex}>\n                        <Input\n                          value={cell}\n                          onChange={(e) => handleCellChange(rowIndex, colIndex, e.target.value)}\n                        />\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n            <div className=\"mt-4\">\n              <Button onClick={addRow} className=\"mr-2\">Add Row</Button>\n              <Button onClick={addColumn}>Add Column</Button>\n            </div>\n          </TabsContent>\n        ))}\n      </Tabs>\n\n      <Button onClick={downloadSheet} className=\"mt-4\">\n        Download Sheet\n      </Button>\n    </div>\n  );\n};\n\nexport default ExcelWebApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}