{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PivotData = exports.sortAs = exports.getSort = exports.numberFormat = exports.naturalSort = exports.locales = exports.derivers = exports.aggregators = exports.aggregatorTemplates = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS104: Avoid inline assignments\n * DS201: Simplify complex destructure assignments\n * DS203: Remove `|| {}` from converted for-own loops\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\nvar addSeparators = function addSeparators(nStr, thousandsSep, decimalSep) {\n  var x = String(nStr).split('.');\n  var x1 = x[0];\n  var x2 = x.length > 1 ? decimalSep + x[1] : '';\n  var rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n  }\n  return x1 + x2;\n};\nvar numberFormat = function numberFormat(opts_in) {\n  var defaults = {\n    digitsAfterDecimal: 2,\n    scaler: 1,\n    thousandsSep: ',',\n    decimalSep: '.',\n    prefix: '',\n    suffix: ''\n  };\n  var opts = Object.assign({}, defaults, opts_in);\n  return function (x) {\n    if (isNaN(x) || !isFinite(x)) {\n      return '';\n    }\n    var result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n    return '' + opts.prefix + result + opts.suffix;\n  };\n};\nvar rx = /(\\d+)|(\\D+)/g;\nvar rd = /\\d/;\nvar rz = /^0/;\nvar naturalSort = function naturalSort(as, bs) {\n  // nulls first\n  if (bs !== null && as === null) {\n    return -1;\n  }\n  if (as !== null && bs === null) {\n    return 1;\n  }\n\n  // then raw NaNs\n  if (typeof as === 'number' && isNaN(as)) {\n    return -1;\n  }\n  if (typeof bs === 'number' && isNaN(bs)) {\n    return 1;\n  }\n\n  // numbers and numbery strings group together\n  var nas = Number(as);\n  var nbs = Number(bs);\n  if (nas < nbs) {\n    return -1;\n  }\n  if (nas > nbs) {\n    return 1;\n  }\n\n  // within that, true numbers before numbery strings\n  if (typeof as === 'number' && typeof bs !== 'number') {\n    return -1;\n  }\n  if (typeof bs === 'number' && typeof as !== 'number') {\n    return 1;\n  }\n  if (typeof as === 'number' && typeof bs === 'number') {\n    return 0;\n  }\n\n  // 'Infinity' is a textual number, so less than 'A'\n  if (isNaN(nbs) && !isNaN(nas)) {\n    return -1;\n  }\n  if (isNaN(nas) && !isNaN(nbs)) {\n    return 1;\n  }\n\n  // finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n  var a = String(as);\n  var b = String(bs);\n  if (a === b) {\n    return 0;\n  }\n  if (!rd.test(a) || !rd.test(b)) {\n    return a > b ? 1 : -1;\n  }\n\n  // special treatment for strings containing digits\n  a = a.match(rx);\n  b = b.match(rx);\n  while (a.length && b.length) {\n    var a1 = a.shift();\n    var b1 = b.shift();\n    if (a1 !== b1) {\n      if (rd.test(a1) && rd.test(b1)) {\n        return a1.replace(rz, '.0') - b1.replace(rz, '.0');\n      }\n      return a1 > b1 ? 1 : -1;\n    }\n  }\n  return a.length - b.length;\n};\nvar sortAs = function sortAs(order) {\n  var mapping = {};\n\n  // sort lowercased keys similarly\n  var l_mapping = {};\n  for (var i in order) {\n    var x = order[i];\n    mapping[x] = i;\n    if (typeof x === 'string') {\n      l_mapping[x.toLowerCase()] = i;\n    }\n  }\n  return function (a, b) {\n    if (a in mapping && b in mapping) {\n      return mapping[a] - mapping[b];\n    } else if (a in mapping) {\n      return -1;\n    } else if (b in mapping) {\n      return 1;\n    } else if (a in l_mapping && b in l_mapping) {\n      return l_mapping[a] - l_mapping[b];\n    } else if (a in l_mapping) {\n      return -1;\n    } else if (b in l_mapping) {\n      return 1;\n    }\n    return naturalSort(a, b);\n  };\n};\nvar getSort = function getSort(sorters, attr) {\n  if (sorters) {\n    if (typeof sorters === 'function') {\n      var sort = sorters(attr);\n      if (typeof sort === 'function') {\n        return sort;\n      }\n    } else if (attr in sorters) {\n      return sorters[attr];\n    }\n  }\n  return naturalSort;\n};\n\n// aggregator templates default to US number formatting but this is overrideable\nvar usFmt = numberFormat();\nvar usFmtInt = numberFormat({\n  digitsAfterDecimal: 0\n});\nvar usFmtPct = numberFormat({\n  digitsAfterDecimal: 1,\n  scaler: 100,\n  suffix: '%'\n});\nvar aggregatorTemplates = {\n  count: function count() {\n    var formatter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : usFmtInt;\n    return function () {\n      return function () {\n        return {\n          count: 0,\n          push: function push() {\n            this.count++;\n          },\n          value: function value() {\n            return this.count;\n          },\n          format: formatter\n        };\n      };\n    };\n  },\n  uniques: function uniques(fn) {\n    var formatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : usFmtInt;\n    return function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n        attr = _ref2[0];\n      return function () {\n        return {\n          uniq: [],\n          push: function push(record) {\n            if (!Array.from(this.uniq).includes(record[attr])) {\n              this.uniq.push(record[attr]);\n            }\n          },\n          value: function value() {\n            return fn(this.uniq);\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  sum: function sum() {\n    var formatter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : usFmt;\n    return function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n        attr = _ref4[0];\n      return function () {\n        return {\n          sum: 0,\n          push: function push(record) {\n            if (!isNaN(parseFloat(record[attr]))) {\n              this.sum += parseFloat(record[attr]);\n            }\n          },\n          value: function value() {\n            return this.sum;\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  extremes: function extremes(mode) {\n    var formatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : usFmt;\n    return function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n        attr = _ref6[0];\n      return function (data) {\n        return {\n          val: null,\n          sorter: getSort(typeof data !== 'undefined' ? data.sorters : null, attr),\n          push: function push(record) {\n            var x = record[attr];\n            if (['min', 'max'].includes(mode)) {\n              x = parseFloat(x);\n              if (!isNaN(x)) {\n                this.val = Math[mode](x, this.val !== null ? this.val : x);\n              }\n            }\n            if (mode === 'first' && this.sorter(x, this.val !== null ? this.val : x) <= 0) {\n              this.val = x;\n            }\n            if (mode === 'last' && this.sorter(x, this.val !== null ? this.val : x) >= 0) {\n              this.val = x;\n            }\n          },\n          value: function value() {\n            return this.val;\n          },\n          format: function format(x) {\n            if (isNaN(x)) {\n              return x;\n            }\n            return formatter(x);\n          },\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  quantile: function quantile(q) {\n    var formatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : usFmt;\n    return function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 1),\n        attr = _ref8[0];\n      return function () {\n        return {\n          vals: [],\n          push: function push(record) {\n            var x = parseFloat(record[attr]);\n            if (!isNaN(x)) {\n              this.vals.push(x);\n            }\n          },\n          value: function value() {\n            if (this.vals.length === 0) {\n              return null;\n            }\n            this.vals.sort(function (a, b) {\n              return a - b;\n            });\n            var i = (this.vals.length - 1) * q;\n            return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  runningStat: function runningStat() {\n    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'mean';\n    var ddof = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var formatter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : usFmt;\n    return function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 1),\n        attr = _ref10[0];\n      return function () {\n        return {\n          n: 0.0,\n          m: 0.0,\n          s: 0.0,\n          push: function push(record) {\n            var x = parseFloat(record[attr]);\n            if (isNaN(x)) {\n              return;\n            }\n            this.n += 1.0;\n            if (this.n === 1.0) {\n              this.m = x;\n            }\n            var m_new = this.m + (x - this.m) / this.n;\n            this.s = this.s + (x - this.m) * (x - m_new);\n            this.m = m_new;\n          },\n          value: function value() {\n            if (mode === 'mean') {\n              if (this.n === 0) {\n                return 0 / 0;\n              }\n              return this.m;\n            }\n            if (this.n <= ddof) {\n              return 0;\n            }\n            switch (mode) {\n              case 'var':\n                return this.s / (this.n - ddof);\n              case 'stdev':\n                return Math.sqrt(this.s / (this.n - ddof));\n              default:\n                throw new Error('unknown mode for runningStat');\n            }\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  sumOverSum: function sumOverSum() {\n    var formatter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : usFmt;\n    return function (_ref11) {\n      var _ref12 = _slicedToArray(_ref11, 2),\n        num = _ref12[0],\n        denom = _ref12[1];\n      return function () {\n        return {\n          sumNum: 0,\n          sumDenom: 0,\n          push: function push(record) {\n            if (!isNaN(parseFloat(record[num]))) {\n              this.sumNum += parseFloat(record[num]);\n            }\n            if (!isNaN(parseFloat(record[denom]))) {\n              this.sumDenom += parseFloat(record[denom]);\n            }\n          },\n          value: function value() {\n            return this.sumNum / this.sumDenom;\n          },\n          format: formatter,\n          numInputs: typeof num !== 'undefined' && typeof denom !== 'undefined' ? 0 : 2\n        };\n      };\n    };\n  },\n  fractionOf: function fractionOf(wrapped) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'total';\n    var formatter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : usFmtPct;\n    return function () {\n      for (var _len = arguments.length, x = Array(_len), _key = 0; _key < _len; _key++) {\n        x[_key] = arguments[_key];\n      }\n      return function (data, rowKey, colKey) {\n        return {\n          selector: {\n            total: [[], []],\n            row: [rowKey, []],\n            col: [[], colKey]\n          }[type],\n          inner: wrapped.apply(undefined, _toConsumableArray(Array.from(x || [])))(data, rowKey, colKey),\n          push: function push(record) {\n            this.inner.push(record);\n          },\n          format: formatter,\n          value: function value() {\n            return this.inner.value() / data.getAggregator.apply(data, _toConsumableArray(Array.from(this.selector || []))).inner.value();\n          },\n          numInputs: wrapped.apply(undefined, _toConsumableArray(Array.from(x || [])))().numInputs\n        };\n      };\n    };\n  }\n};\naggregatorTemplates.countUnique = function (f) {\n  return aggregatorTemplates.uniques(function (x) {\n    return x.length;\n  }, f);\n};\naggregatorTemplates.listUnique = function (s) {\n  return aggregatorTemplates.uniques(function (x) {\n    return x.join(s);\n  }, function (x) {\n    return x;\n  });\n};\naggregatorTemplates.max = function (f) {\n  return aggregatorTemplates.extremes('max', f);\n};\naggregatorTemplates.min = function (f) {\n  return aggregatorTemplates.extremes('min', f);\n};\naggregatorTemplates.first = function (f) {\n  return aggregatorTemplates.extremes('first', f);\n};\naggregatorTemplates.last = function (f) {\n  return aggregatorTemplates.extremes('last', f);\n};\naggregatorTemplates.median = function (f) {\n  return aggregatorTemplates.quantile(0.5, f);\n};\naggregatorTemplates.average = function (f) {\n  return aggregatorTemplates.runningStat('mean', 1, f);\n};\naggregatorTemplates.var = function (ddof, f) {\n  return aggregatorTemplates.runningStat('var', ddof, f);\n};\naggregatorTemplates.stdev = function (ddof, f) {\n  return aggregatorTemplates.runningStat('stdev', ddof, f);\n};\n\n// default aggregators & renderers use US naming and number formatting\nvar aggregators = function (tpl) {\n  return {\n    Count: tpl.count(usFmtInt),\n    'Count Unique Values': tpl.countUnique(usFmtInt),\n    'List Unique Values': tpl.listUnique(', '),\n    Sum: tpl.sum(usFmt),\n    'Integer Sum': tpl.sum(usFmtInt),\n    Average: tpl.average(usFmt),\n    Median: tpl.median(usFmt),\n    'Sample Variance': tpl.var(1, usFmt),\n    'Sample Standard Deviation': tpl.stdev(1, usFmt),\n    Minimum: tpl.min(usFmt),\n    Maximum: tpl.max(usFmt),\n    First: tpl.first(usFmt),\n    Last: tpl.last(usFmt),\n    'Sum over Sum': tpl.sumOverSum(usFmt),\n    'Sum as Fraction of Total': tpl.fractionOf(tpl.sum(), 'total', usFmtPct),\n    'Sum as Fraction of Rows': tpl.fractionOf(tpl.sum(), 'row', usFmtPct),\n    'Sum as Fraction of Columns': tpl.fractionOf(tpl.sum(), 'col', usFmtPct),\n    'Count as Fraction of Total': tpl.fractionOf(tpl.count(), 'total', usFmtPct),\n    'Count as Fraction of Rows': tpl.fractionOf(tpl.count(), 'row', usFmtPct),\n    'Count as Fraction of Columns': tpl.fractionOf(tpl.count(), 'col', usFmtPct)\n  };\n}(aggregatorTemplates);\nvar locales = {\n  en: {\n    aggregators: aggregators,\n    localeStrings: {\n      renderError: 'An error occurred rendering the PivotTable results.',\n      computeError: 'An error occurred computing the PivotTable results.',\n      uiRenderError: 'An error occurred rendering the PivotTable UI.',\n      selectAll: 'Select All',\n      selectNone: 'Select None',\n      tooMany: '(too many to list)',\n      filterResults: 'Filter values',\n      apply: 'Apply',\n      cancel: 'Cancel',\n      totals: 'Totals',\n      vs: 'vs',\n      by: 'by'\n    }\n  }\n};\n\n// dateFormat deriver l10n requires month and day names to be passed in directly\nvar mthNamesEn = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nvar dayNamesEn = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar zeroPad = function zeroPad(number) {\n  return ('0' + number).substr(-2, 2);\n}; // eslint-disable-line no-magic-numbers\n\nvar derivers = {\n  bin: function bin(col, binWidth) {\n    return function (record) {\n      return record[col] - record[col] % binWidth;\n    };\n  },\n  dateFormat: function dateFormat(col, formatString) {\n    var utcOutput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var mthNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : mthNamesEn;\n    var dayNames = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : dayNamesEn;\n    var utc = utcOutput ? 'UTC' : '';\n    return function (record) {\n      var date = new Date(Date.parse(record[col]));\n      if (isNaN(date)) {\n        return '';\n      }\n      return formatString.replace(/%(.)/g, function (m, p) {\n        switch (p) {\n          case 'y':\n            return date['get' + utc + 'FullYear']();\n          case 'm':\n            return zeroPad(date['get' + utc + 'Month']() + 1);\n          case 'n':\n            return mthNames[date['get' + utc + 'Month']()];\n          case 'd':\n            return zeroPad(date['get' + utc + 'Date']());\n          case 'w':\n            return dayNames[date['get' + utc + 'Day']()];\n          case 'x':\n            return date['get' + utc + 'Day']();\n          case 'H':\n            return zeroPad(date['get' + utc + 'Hours']());\n          case 'M':\n            return zeroPad(date['get' + utc + 'Minutes']());\n          case 'S':\n            return zeroPad(date['get' + utc + 'Seconds']());\n          default:\n            return '%' + p;\n        }\n      });\n    };\n  }\n};\n\n/*\nData Model class\n*/\n\nvar PivotData = function () {\n  function PivotData() {\n    var _this = this;\n    var inputProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, PivotData);\n    this.props = Object.assign({}, PivotData.defaultProps, inputProps);\n    _propTypes2.default.checkPropTypes(PivotData.propTypes, this.props, 'prop', 'PivotData');\n    this.aggregator = this.props.aggregators[this.props.aggregatorName](this.props.vals);\n    this.tree = {};\n    this.rowKeys = [];\n    this.colKeys = [];\n    this.rowTotals = {};\n    this.colTotals = {};\n    this.allTotal = this.aggregator(this, [], []);\n    this.sorted = false;\n\n    // iterate through input, accumulating data for cells\n    PivotData.forEachRecord(this.props.data, this.props.derivedAttributes, function (record) {\n      if (_this.filter(record)) {\n        _this.processRecord(record);\n      }\n    });\n  }\n  _createClass(PivotData, [{\n    key: 'filter',\n    value: function filter(record) {\n      for (var k in this.props.valueFilter) {\n        if (record[k] in this.props.valueFilter[k]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }, {\n    key: 'forEachMatchingRecord',\n    value: function forEachMatchingRecord(criteria, callback) {\n      var _this2 = this;\n      return PivotData.forEachRecord(this.props.data, this.props.derivedAttributes, function (record) {\n        if (!_this2.filter(record)) {\n          return;\n        }\n        for (var k in criteria) {\n          var v = criteria[k];\n          if (v !== (k in record ? record[k] : 'null')) {\n            return;\n          }\n        }\n        callback(record);\n      });\n    }\n  }, {\n    key: 'arrSort',\n    value: function arrSort(attrs) {\n      var _this3 = this;\n      var a = void 0;\n      var sortersArr = function () {\n        var result = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n          for (var _iterator = Array.from(attrs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            a = _step.value;\n            result.push(getSort(_this3.props.sorters, a));\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        return result;\n      }();\n      return function (a, b) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n        try {\n          for (var _iterator2 = Object.keys(sortersArr || {})[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var i = _step2.value;\n            var sorter = sortersArr[i];\n            var comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n        return 0;\n      };\n    }\n  }, {\n    key: 'sortKeys',\n    value: function sortKeys() {\n      var _this4 = this;\n      if (!this.sorted) {\n        this.sorted = true;\n        var v = function v(r, c) {\n          return _this4.getAggregator(r, c).value();\n        };\n        switch (this.props.rowOrder) {\n          case 'value_a_to_z':\n            this.rowKeys.sort(function (a, b) {\n              return naturalSort(v(a, []), v(b, []));\n            });\n            break;\n          case 'value_z_to_a':\n            this.rowKeys.sort(function (a, b) {\n              return -naturalSort(v(a, []), v(b, []));\n            });\n            break;\n          default:\n            this.rowKeys.sort(this.arrSort(this.props.rows));\n        }\n        switch (this.props.colOrder) {\n          case 'value_a_to_z':\n            this.colKeys.sort(function (a, b) {\n              return naturalSort(v([], a), v([], b));\n            });\n            break;\n          case 'value_z_to_a':\n            this.colKeys.sort(function (a, b) {\n              return -naturalSort(v([], a), v([], b));\n            });\n            break;\n          default:\n            this.colKeys.sort(this.arrSort(this.props.cols));\n        }\n      }\n    }\n  }, {\n    key: 'getColKeys',\n    value: function getColKeys() {\n      this.sortKeys();\n      return this.colKeys;\n    }\n  }, {\n    key: 'getRowKeys',\n    value: function getRowKeys() {\n      this.sortKeys();\n      return this.rowKeys;\n    }\n  }, {\n    key: 'processRecord',\n    value: function processRecord(record) {\n      // this code is called in a tight loop\n      var colKey = [];\n      var rowKey = [];\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n      try {\n        for (var _iterator3 = Array.from(this.props.cols)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var x = _step3.value;\n          colKey.push(x in record ? record[x] : 'null');\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n      try {\n        for (var _iterator4 = Array.from(this.props.rows)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _x16 = _step4.value;\n          rowKey.push(_x16 in record ? record[_x16] : 'null');\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n      var flatRowKey = rowKey.join(String.fromCharCode(0));\n      var flatColKey = colKey.join(String.fromCharCode(0));\n      this.allTotal.push(record);\n      if (rowKey.length !== 0) {\n        if (!this.rowTotals[flatRowKey]) {\n          this.rowKeys.push(rowKey);\n          this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n        }\n        this.rowTotals[flatRowKey].push(record);\n      }\n      if (colKey.length !== 0) {\n        if (!this.colTotals[flatColKey]) {\n          this.colKeys.push(colKey);\n          this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n        }\n        this.colTotals[flatColKey].push(record);\n      }\n      if (colKey.length !== 0 && rowKey.length !== 0) {\n        if (!this.tree[flatRowKey]) {\n          this.tree[flatRowKey] = {};\n        }\n        if (!this.tree[flatRowKey][flatColKey]) {\n          this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n        }\n        this.tree[flatRowKey][flatColKey].push(record);\n      }\n    }\n  }, {\n    key: 'getAggregator',\n    value: function getAggregator(rowKey, colKey) {\n      var agg = void 0;\n      var flatRowKey = rowKey.join(String.fromCharCode(0));\n      var flatColKey = colKey.join(String.fromCharCode(0));\n      if (rowKey.length === 0 && colKey.length === 0) {\n        agg = this.allTotal;\n      } else if (rowKey.length === 0) {\n        agg = this.colTotals[flatColKey];\n      } else if (colKey.length === 0) {\n        agg = this.rowTotals[flatRowKey];\n      } else {\n        agg = this.tree[flatRowKey][flatColKey];\n      }\n      return agg || {\n        value: function value() {\n          return null;\n        },\n        format: function format() {\n          return '';\n        }\n      };\n    }\n  }]);\n  return PivotData;\n}();\n\n// can handle arrays or jQuery selections of tables\n\nPivotData.forEachRecord = function (input, derivedAttributes, f) {\n  var addRecord = void 0,\n    record = void 0;\n  if (Object.getOwnPropertyNames(derivedAttributes).length === 0) {\n    addRecord = f;\n  } else {\n    addRecord = function addRecord(record) {\n      for (var k in derivedAttributes) {\n        var derived = derivedAttributes[k](record);\n        if (derived !== null) {\n          record[k] = derived;\n        }\n      }\n      return f(record);\n    };\n  }\n\n  // if it's a function, have it call us back\n  if (typeof input === 'function') {\n    return input(addRecord);\n  } else if (Array.isArray(input)) {\n    if (Array.isArray(input[0])) {\n      // array of arrays\n      return function () {\n        var result = [];\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n        try {\n          for (var _iterator5 = Object.keys(input || {})[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var i = _step5.value;\n            var compactRecord = input[i];\n            if (i > 0) {\n              record = {};\n              var _iteratorNormalCompletion6 = true;\n              var _didIteratorError6 = false;\n              var _iteratorError6 = undefined;\n              try {\n                for (var _iterator6 = Object.keys(input[0] || {})[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  var j = _step6.value;\n                  var k = input[0][j];\n                  record[k] = compactRecord[j];\n                }\n              } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                    _iterator6.return();\n                  }\n                } finally {\n                  if (_didIteratorError6) {\n                    throw _iteratorError6;\n                  }\n                }\n              }\n              result.push(addRecord(record));\n            }\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return) {\n              _iterator5.return();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n        return result;\n      }();\n    }\n\n    // array of objects\n    return function () {\n      var result1 = [];\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n      try {\n        for (var _iterator7 = Array.from(input)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          record = _step7.value;\n          result1.push(addRecord(record));\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n      return result1;\n    }();\n  }\n  throw new Error('unknown input format');\n};\nPivotData.defaultProps = {\n  aggregators: aggregators,\n  cols: [],\n  rows: [],\n  vals: [],\n  aggregatorName: 'Count',\n  sorters: {},\n  valueFilter: {},\n  rowOrder: 'key_a_to_z',\n  colOrder: 'key_a_to_z',\n  derivedAttributes: {}\n};\nPivotData.propTypes = {\n  data: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object, _propTypes2.default.func]).isRequired,\n  aggregatorName: _propTypes2.default.string,\n  cols: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  rows: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  vals: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  valueFilter: _propTypes2.default.objectOf(_propTypes2.default.objectOf(_propTypes2.default.bool)),\n  sorters: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.objectOf(_propTypes2.default.func)]),\n  derivedAttributes: _propTypes2.default.objectOf(_propTypes2.default.func),\n  rowOrder: _propTypes2.default.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a']),\n  colOrder: _propTypes2.default.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a'])\n};\nexports.aggregatorTemplates = aggregatorTemplates;\nexports.aggregators = aggregators;\nexports.derivers = derivers;\nexports.locales = locales;\nexports.naturalSort = naturalSort;\nexports.numberFormat = numberFormat;\nexports.getSort = getSort;\nexports.sortAs = sortAs;\nexports.PivotData = PivotData;","map":{"version":3,"names":["_propTypes","require","addSeparators","nStr","thousandsSep","decimalSep","x","String","split","x1","x2","length","rgx","test","replace","numberFormat","opts_in","defaults","digitsAfterDecimal","scaler","prefix","suffix","opts","Object","assign","isNaN","isFinite","result","toFixed","rx","rd","rz","naturalSort","as","bs","nas","Number","nbs","a","b","match","a1","shift","b1","sortAs","order","mapping","l_mapping","i","toLowerCase","getSort","sorters","attr","sort","usFmt","usFmtInt","usFmtPct","aggregatorTemplates","count","formatter","arguments","undefined","push","value","format","uniques","fn","_ref","_ref2","_slicedToArray","uniq","record","Array","from","includes","numInputs","sum","_ref3","_ref4","parseFloat","extremes","mode","_ref5","_ref6","data","val","sorter","Math","quantile","q","_ref7","_ref8","vals","floor","ceil","runningStat","ddof","_ref9","_ref10","n","m","s","m_new","sqrt","Error","sumOverSum","_ref11","_ref12","num","denom","sumNum","sumDenom","fractionOf","wrapped","type","_len","_key","rowKey","colKey","selector","total","row","col","inner","apply","_toConsumableArray","getAggregator","countUnique","f","listUnique","join","max","min","first","last","median","average","var","stdev","aggregators","tpl","Count","Sum","Average","Median","Minimum","Maximum","First","Last","locales","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","mthNamesEn","dayNamesEn","zeroPad","number","substr","derivers","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","PivotData","_this","inputProps","_classCallCheck","props","defaultProps","_propTypes2","default","checkPropTypes","propTypes","aggregator","aggregatorName","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","derivedAttributes","filter","processRecord","k","valueFilter","criteria","callback","_this2","v","attrs","_this3","sortersArr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","next","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","keys","_step2","comparison","_this4","r","c","rowOrder","arrSort","rows","colOrder","cols","sortKeys","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_x16","flatRowKey","fromCharCode","flatColKey","agg","input","addRecord","getOwnPropertyNames","derived","isArray","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","compactRecord","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","j","result1","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","oneOfType","array","object","func","isRequired","string","arrayOf","objectOf","bool","oneOf"],"sources":["D:\\Development\\React Project\\Excel Web App\\excelwebapp\\node_modules\\react-pivottable\\src\\Utilities.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS104: Avoid inline assignments\n * DS201: Simplify complex destructure assignments\n * DS203: Remove `|| {}` from converted for-own loops\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\nconst addSeparators = function(nStr, thousandsSep, decimalSep) {\n  const x = String(nStr).split('.');\n  let x1 = x[0];\n  const x2 = x.length > 1 ? decimalSep + x[1] : '';\n  const rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, `$1${thousandsSep}$2`);\n  }\n  return x1 + x2;\n};\n\nconst numberFormat = function(opts_in) {\n  const defaults = {\n    digitsAfterDecimal: 2,\n    scaler: 1,\n    thousandsSep: ',',\n    decimalSep: '.',\n    prefix: '',\n    suffix: '',\n  };\n  const opts = Object.assign({}, defaults, opts_in);\n  return function(x) {\n    if (isNaN(x) || !isFinite(x)) {\n      return '';\n    }\n    const result = addSeparators(\n      (opts.scaler * x).toFixed(opts.digitsAfterDecimal),\n      opts.thousandsSep,\n      opts.decimalSep\n    );\n    return `${opts.prefix}${result}${opts.suffix}`;\n  };\n};\n\nconst rx = /(\\d+)|(\\D+)/g;\nconst rd = /\\d/;\nconst rz = /^0/;\nconst naturalSort = (as, bs) => {\n  // nulls first\n  if (bs !== null && as === null) {\n    return -1;\n  }\n  if (as !== null && bs === null) {\n    return 1;\n  }\n\n  // then raw NaNs\n  if (typeof as === 'number' && isNaN(as)) {\n    return -1;\n  }\n  if (typeof bs === 'number' && isNaN(bs)) {\n    return 1;\n  }\n\n  // numbers and numbery strings group together\n  const nas = Number(as);\n  const nbs = Number(bs);\n  if (nas < nbs) {\n    return -1;\n  }\n  if (nas > nbs) {\n    return 1;\n  }\n\n  // within that, true numbers before numbery strings\n  if (typeof as === 'number' && typeof bs !== 'number') {\n    return -1;\n  }\n  if (typeof bs === 'number' && typeof as !== 'number') {\n    return 1;\n  }\n  if (typeof as === 'number' && typeof bs === 'number') {\n    return 0;\n  }\n\n  // 'Infinity' is a textual number, so less than 'A'\n  if (isNaN(nbs) && !isNaN(nas)) {\n    return -1;\n  }\n  if (isNaN(nas) && !isNaN(nbs)) {\n    return 1;\n  }\n\n  // finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n  let a = String(as);\n  let b = String(bs);\n  if (a === b) {\n    return 0;\n  }\n  if (!rd.test(a) || !rd.test(b)) {\n    return a > b ? 1 : -1;\n  }\n\n  // special treatment for strings containing digits\n  a = a.match(rx);\n  b = b.match(rx);\n  while (a.length && b.length) {\n    const a1 = a.shift();\n    const b1 = b.shift();\n    if (a1 !== b1) {\n      if (rd.test(a1) && rd.test(b1)) {\n        return a1.replace(rz, '.0') - b1.replace(rz, '.0');\n      }\n      return a1 > b1 ? 1 : -1;\n    }\n  }\n  return a.length - b.length;\n};\n\nconst sortAs = function(order) {\n  const mapping = {};\n\n  // sort lowercased keys similarly\n  const l_mapping = {};\n  for (const i in order) {\n    const x = order[i];\n    mapping[x] = i;\n    if (typeof x === 'string') {\n      l_mapping[x.toLowerCase()] = i;\n    }\n  }\n  return function(a, b) {\n    if (a in mapping && b in mapping) {\n      return mapping[a] - mapping[b];\n    } else if (a in mapping) {\n      return -1;\n    } else if (b in mapping) {\n      return 1;\n    } else if (a in l_mapping && b in l_mapping) {\n      return l_mapping[a] - l_mapping[b];\n    } else if (a in l_mapping) {\n      return -1;\n    } else if (b in l_mapping) {\n      return 1;\n    }\n    return naturalSort(a, b);\n  };\n};\n\nconst getSort = function(sorters, attr) {\n  if (sorters) {\n    if (typeof sorters === 'function') {\n      const sort = sorters(attr);\n      if (typeof sort === 'function') {\n        return sort;\n      }\n    } else if (attr in sorters) {\n      return sorters[attr];\n    }\n  }\n  return naturalSort;\n};\n\n// aggregator templates default to US number formatting but this is overrideable\nconst usFmt = numberFormat();\nconst usFmtInt = numberFormat({digitsAfterDecimal: 0});\nconst usFmtPct = numberFormat({\n  digitsAfterDecimal: 1,\n  scaler: 100,\n  suffix: '%',\n});\n\nconst aggregatorTemplates = {\n  count(formatter = usFmtInt) {\n    return () =>\n      function() {\n        return {\n          count: 0,\n          push() {\n            this.count++;\n          },\n          value() {\n            return this.count;\n          },\n          format: formatter,\n        };\n      };\n  },\n\n  uniques(fn, formatter = usFmtInt) {\n    return function([attr]) {\n      return function() {\n        return {\n          uniq: [],\n          push(record) {\n            if (!Array.from(this.uniq).includes(record[attr])) {\n              this.uniq.push(record[attr]);\n            }\n          },\n          value() {\n            return fn(this.uniq);\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  sum(formatter = usFmt) {\n    return function([attr]) {\n      return function() {\n        return {\n          sum: 0,\n          push(record) {\n            if (!isNaN(parseFloat(record[attr]))) {\n              this.sum += parseFloat(record[attr]);\n            }\n          },\n          value() {\n            return this.sum;\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  extremes(mode, formatter = usFmt) {\n    return function([attr]) {\n      return function(data) {\n        return {\n          val: null,\n          sorter: getSort(\n            typeof data !== 'undefined' ? data.sorters : null,\n            attr\n          ),\n          push(record) {\n            let x = record[attr];\n            if (['min', 'max'].includes(mode)) {\n              x = parseFloat(x);\n              if (!isNaN(x)) {\n                this.val = Math[mode](x, this.val !== null ? this.val : x);\n              }\n            }\n            if (\n              mode === 'first' &&\n              this.sorter(x, this.val !== null ? this.val : x) <= 0\n            ) {\n              this.val = x;\n            }\n            if (\n              mode === 'last' &&\n              this.sorter(x, this.val !== null ? this.val : x) >= 0\n            ) {\n              this.val = x;\n            }\n          },\n          value() {\n            return this.val;\n          },\n          format(x) {\n            if (isNaN(x)) {\n              return x;\n            }\n            return formatter(x);\n          },\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  quantile(q, formatter = usFmt) {\n    return function([attr]) {\n      return function() {\n        return {\n          vals: [],\n          push(record) {\n            const x = parseFloat(record[attr]);\n            if (!isNaN(x)) {\n              this.vals.push(x);\n            }\n          },\n          value() {\n            if (this.vals.length === 0) {\n              return null;\n            }\n            this.vals.sort((a, b) => a - b);\n            const i = (this.vals.length - 1) * q;\n            return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  runningStat(mode = 'mean', ddof = 1, formatter = usFmt) {\n    return function([attr]) {\n      return function() {\n        return {\n          n: 0.0,\n          m: 0.0,\n          s: 0.0,\n          push(record) {\n            const x = parseFloat(record[attr]);\n            if (isNaN(x)) {\n              return;\n            }\n            this.n += 1.0;\n            if (this.n === 1.0) {\n              this.m = x;\n            }\n            const m_new = this.m + (x - this.m) / this.n;\n            this.s = this.s + (x - this.m) * (x - m_new);\n            this.m = m_new;\n          },\n          value() {\n            if (mode === 'mean') {\n              if (this.n === 0) {\n                return 0 / 0;\n              }\n              return this.m;\n            }\n            if (this.n <= ddof) {\n              return 0;\n            }\n            switch (mode) {\n              case 'var':\n                return this.s / (this.n - ddof);\n              case 'stdev':\n                return Math.sqrt(this.s / (this.n - ddof));\n              default:\n                throw new Error('unknown mode for runningStat');\n            }\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  sumOverSum(formatter = usFmt) {\n    return function([num, denom]) {\n      return function() {\n        return {\n          sumNum: 0,\n          sumDenom: 0,\n          push(record) {\n            if (!isNaN(parseFloat(record[num]))) {\n              this.sumNum += parseFloat(record[num]);\n            }\n            if (!isNaN(parseFloat(record[denom]))) {\n              this.sumDenom += parseFloat(record[denom]);\n            }\n          },\n          value() {\n            return this.sumNum / this.sumDenom;\n          },\n          format: formatter,\n          numInputs:\n            typeof num !== 'undefined' && typeof denom !== 'undefined' ? 0 : 2,\n        };\n      };\n    };\n  },\n\n  fractionOf(wrapped, type = 'total', formatter = usFmtPct) {\n    return (...x) =>\n      function(data, rowKey, colKey) {\n        return {\n          selector: {total: [[], []], row: [rowKey, []], col: [[], colKey]}[\n            type\n          ],\n          inner: wrapped(...Array.from(x || []))(data, rowKey, colKey),\n          push(record) {\n            this.inner.push(record);\n          },\n          format: formatter,\n          value() {\n            return (\n              this.inner.value() /\n              data\n                .getAggregator(...Array.from(this.selector || []))\n                .inner.value()\n            );\n          },\n          numInputs: wrapped(...Array.from(x || []))().numInputs,\n        };\n      };\n  },\n};\n\naggregatorTemplates.countUnique = f =>\n  aggregatorTemplates.uniques(x => x.length, f);\naggregatorTemplates.listUnique = s =>\n  aggregatorTemplates.uniques(\n    x => x.join(s),\n    x => x\n  );\naggregatorTemplates.max = f => aggregatorTemplates.extremes('max', f);\naggregatorTemplates.min = f => aggregatorTemplates.extremes('min', f);\naggregatorTemplates.first = f => aggregatorTemplates.extremes('first', f);\naggregatorTemplates.last = f => aggregatorTemplates.extremes('last', f);\naggregatorTemplates.median = f => aggregatorTemplates.quantile(0.5, f);\naggregatorTemplates.average = f =>\n  aggregatorTemplates.runningStat('mean', 1, f);\naggregatorTemplates.var = (ddof, f) =>\n  aggregatorTemplates.runningStat('var', ddof, f);\naggregatorTemplates.stdev = (ddof, f) =>\n  aggregatorTemplates.runningStat('stdev', ddof, f);\n\n// default aggregators & renderers use US naming and number formatting\nconst aggregators = (tpl => ({\n  Count: tpl.count(usFmtInt),\n  'Count Unique Values': tpl.countUnique(usFmtInt),\n  'List Unique Values': tpl.listUnique(', '),\n  Sum: tpl.sum(usFmt),\n  'Integer Sum': tpl.sum(usFmtInt),\n  Average: tpl.average(usFmt),\n  Median: tpl.median(usFmt),\n  'Sample Variance': tpl.var(1, usFmt),\n  'Sample Standard Deviation': tpl.stdev(1, usFmt),\n  Minimum: tpl.min(usFmt),\n  Maximum: tpl.max(usFmt),\n  First: tpl.first(usFmt),\n  Last: tpl.last(usFmt),\n  'Sum over Sum': tpl.sumOverSum(usFmt),\n  'Sum as Fraction of Total': tpl.fractionOf(tpl.sum(), 'total', usFmtPct),\n  'Sum as Fraction of Rows': tpl.fractionOf(tpl.sum(), 'row', usFmtPct),\n  'Sum as Fraction of Columns': tpl.fractionOf(tpl.sum(), 'col', usFmtPct),\n  'Count as Fraction of Total': tpl.fractionOf(tpl.count(), 'total', usFmtPct),\n  'Count as Fraction of Rows': tpl.fractionOf(tpl.count(), 'row', usFmtPct),\n  'Count as Fraction of Columns': tpl.fractionOf(tpl.count(), 'col', usFmtPct),\n}))(aggregatorTemplates);\n\nconst locales = {\n  en: {\n    aggregators,\n    localeStrings: {\n      renderError: 'An error occurred rendering the PivotTable results.',\n      computeError: 'An error occurred computing the PivotTable results.',\n      uiRenderError: 'An error occurred rendering the PivotTable UI.',\n      selectAll: 'Select All',\n      selectNone: 'Select None',\n      tooMany: '(too many to list)',\n      filterResults: 'Filter values',\n      apply: 'Apply',\n      cancel: 'Cancel',\n      totals: 'Totals',\n      vs: 'vs',\n      by: 'by',\n    },\n  },\n};\n\n// dateFormat deriver l10n requires month and day names to be passed in directly\nconst mthNamesEn = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\nconst dayNamesEn = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst zeroPad = number => `0${number}`.substr(-2, 2); // eslint-disable-line no-magic-numbers\n\nconst derivers = {\n  bin(col, binWidth) {\n    return record => record[col] - (record[col] % binWidth);\n  },\n  dateFormat(\n    col,\n    formatString,\n    utcOutput = false,\n    mthNames = mthNamesEn,\n    dayNames = dayNamesEn\n  ) {\n    const utc = utcOutput ? 'UTC' : '';\n    return function(record) {\n      const date = new Date(Date.parse(record[col]));\n      if (isNaN(date)) {\n        return '';\n      }\n      return formatString.replace(/%(.)/g, function(m, p) {\n        switch (p) {\n          case 'y':\n            return date[`get${utc}FullYear`]();\n          case 'm':\n            return zeroPad(date[`get${utc}Month`]() + 1);\n          case 'n':\n            return mthNames[date[`get${utc}Month`]()];\n          case 'd':\n            return zeroPad(date[`get${utc}Date`]());\n          case 'w':\n            return dayNames[date[`get${utc}Day`]()];\n          case 'x':\n            return date[`get${utc}Day`]();\n          case 'H':\n            return zeroPad(date[`get${utc}Hours`]());\n          case 'M':\n            return zeroPad(date[`get${utc}Minutes`]());\n          case 'S':\n            return zeroPad(date[`get${utc}Seconds`]());\n          default:\n            return `%${p}`;\n        }\n      });\n    };\n  },\n};\n\n/*\nData Model class\n*/\n\nclass PivotData {\n  constructor(inputProps = {}) {\n    this.props = Object.assign({}, PivotData.defaultProps, inputProps);\n    PropTypes.checkPropTypes(\n      PivotData.propTypes,\n      this.props,\n      'prop',\n      'PivotData'\n    );\n\n    this.aggregator = this.props.aggregators[this.props.aggregatorName](\n      this.props.vals\n    );\n    this.tree = {};\n    this.rowKeys = [];\n    this.colKeys = [];\n    this.rowTotals = {};\n    this.colTotals = {};\n    this.allTotal = this.aggregator(this, [], []);\n    this.sorted = false;\n\n    // iterate through input, accumulating data for cells\n    PivotData.forEachRecord(\n      this.props.data,\n      this.props.derivedAttributes,\n      record => {\n        if (this.filter(record)) {\n          this.processRecord(record);\n        }\n      }\n    );\n  }\n\n  filter(record) {\n    for (const k in this.props.valueFilter) {\n      if (record[k] in this.props.valueFilter[k]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  forEachMatchingRecord(criteria, callback) {\n    return PivotData.forEachRecord(\n      this.props.data,\n      this.props.derivedAttributes,\n      record => {\n        if (!this.filter(record)) {\n          return;\n        }\n        for (const k in criteria) {\n          const v = criteria[k];\n          if (v !== (k in record ? record[k] : 'null')) {\n            return;\n          }\n        }\n        callback(record);\n      }\n    );\n  }\n\n  arrSort(attrs) {\n    let a;\n    const sortersArr = (() => {\n      const result = [];\n      for (a of Array.from(attrs)) {\n        result.push(getSort(this.props.sorters, a));\n      }\n      return result;\n    })();\n    return function(a, b) {\n      for (const i of Object.keys(sortersArr || {})) {\n        const sorter = sortersArr[i];\n        const comparison = sorter(a[i], b[i]);\n        if (comparison !== 0) {\n          return comparison;\n        }\n      }\n      return 0;\n    };\n  }\n\n  sortKeys() {\n    if (!this.sorted) {\n      this.sorted = true;\n      const v = (r, c) => this.getAggregator(r, c).value();\n      switch (this.props.rowOrder) {\n        case 'value_a_to_z':\n          this.rowKeys.sort((a, b) => naturalSort(v(a, []), v(b, [])));\n          break;\n        case 'value_z_to_a':\n          this.rowKeys.sort((a, b) => -naturalSort(v(a, []), v(b, [])));\n          break;\n        default:\n          this.rowKeys.sort(this.arrSort(this.props.rows));\n      }\n      switch (this.props.colOrder) {\n        case 'value_a_to_z':\n          this.colKeys.sort((a, b) => naturalSort(v([], a), v([], b)));\n          break;\n        case 'value_z_to_a':\n          this.colKeys.sort((a, b) => -naturalSort(v([], a), v([], b)));\n          break;\n        default:\n          this.colKeys.sort(this.arrSort(this.props.cols));\n      }\n    }\n  }\n\n  getColKeys() {\n    this.sortKeys();\n    return this.colKeys;\n  }\n\n  getRowKeys() {\n    this.sortKeys();\n    return this.rowKeys;\n  }\n\n  processRecord(record) {\n    // this code is called in a tight loop\n    const colKey = [];\n    const rowKey = [];\n    for (const x of Array.from(this.props.cols)) {\n      colKey.push(x in record ? record[x] : 'null');\n    }\n    for (const x of Array.from(this.props.rows)) {\n      rowKey.push(x in record ? record[x] : 'null');\n    }\n    const flatRowKey = rowKey.join(String.fromCharCode(0));\n    const flatColKey = colKey.join(String.fromCharCode(0));\n\n    this.allTotal.push(record);\n\n    if (rowKey.length !== 0) {\n      if (!this.rowTotals[flatRowKey]) {\n        this.rowKeys.push(rowKey);\n        this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n      }\n      this.rowTotals[flatRowKey].push(record);\n    }\n\n    if (colKey.length !== 0) {\n      if (!this.colTotals[flatColKey]) {\n        this.colKeys.push(colKey);\n        this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n      }\n      this.colTotals[flatColKey].push(record);\n    }\n\n    if (colKey.length !== 0 && rowKey.length !== 0) {\n      if (!this.tree[flatRowKey]) {\n        this.tree[flatRowKey] = {};\n      }\n      if (!this.tree[flatRowKey][flatColKey]) {\n        this.tree[flatRowKey][flatColKey] = this.aggregator(\n          this,\n          rowKey,\n          colKey\n        );\n      }\n      this.tree[flatRowKey][flatColKey].push(record);\n    }\n  }\n\n  getAggregator(rowKey, colKey) {\n    let agg;\n    const flatRowKey = rowKey.join(String.fromCharCode(0));\n    const flatColKey = colKey.join(String.fromCharCode(0));\n    if (rowKey.length === 0 && colKey.length === 0) {\n      agg = this.allTotal;\n    } else if (rowKey.length === 0) {\n      agg = this.colTotals[flatColKey];\n    } else if (colKey.length === 0) {\n      agg = this.rowTotals[flatRowKey];\n    } else {\n      agg = this.tree[flatRowKey][flatColKey];\n    }\n    return (\n      agg || {\n        value() {\n          return null;\n        },\n        format() {\n          return '';\n        },\n      }\n    );\n  }\n}\n\n// can handle arrays or jQuery selections of tables\nPivotData.forEachRecord = function(input, derivedAttributes, f) {\n  let addRecord, record;\n  if (Object.getOwnPropertyNames(derivedAttributes).length === 0) {\n    addRecord = f;\n  } else {\n    addRecord = function(record) {\n      for (const k in derivedAttributes) {\n        const derived = derivedAttributes[k](record);\n        if (derived !== null) {\n          record[k] = derived;\n        }\n      }\n      return f(record);\n    };\n  }\n\n  // if it's a function, have it call us back\n  if (typeof input === 'function') {\n    return input(addRecord);\n  } else if (Array.isArray(input)) {\n    if (Array.isArray(input[0])) {\n      // array of arrays\n      return (() => {\n        const result = [];\n        for (const i of Object.keys(input || {})) {\n          const compactRecord = input[i];\n          if (i > 0) {\n            record = {};\n            for (const j of Object.keys(input[0] || {})) {\n              const k = input[0][j];\n              record[k] = compactRecord[j];\n            }\n            result.push(addRecord(record));\n          }\n        }\n        return result;\n      })();\n    }\n\n    // array of objects\n    return (() => {\n      const result1 = [];\n      for (record of Array.from(input)) {\n        result1.push(addRecord(record));\n      }\n      return result1;\n    })();\n  }\n  throw new Error('unknown input format');\n};\n\nPivotData.defaultProps = {\n  aggregators: aggregators,\n  cols: [],\n  rows: [],\n  vals: [],\n  aggregatorName: 'Count',\n  sorters: {},\n  valueFilter: {},\n  rowOrder: 'key_a_to_z',\n  colOrder: 'key_a_to_z',\n  derivedAttributes: {},\n};\n\nPivotData.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.func])\n    .isRequired,\n  aggregatorName: PropTypes.string,\n  cols: PropTypes.arrayOf(PropTypes.string),\n  rows: PropTypes.arrayOf(PropTypes.string),\n  vals: PropTypes.arrayOf(PropTypes.string),\n  valueFilter: PropTypes.objectOf(PropTypes.objectOf(PropTypes.bool)),\n  sorters: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.objectOf(PropTypes.func),\n  ]),\n  derivedAttributes: PropTypes.objectOf(PropTypes.func),\n  rowOrder: PropTypes.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a']),\n  colOrder: PropTypes.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a']),\n};\n\nexport {\n  aggregatorTemplates,\n  aggregators,\n  derivers,\n  locales,\n  naturalSort,\n  numberFormat,\n  getSort,\n  sortAs,\n  PivotData,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}